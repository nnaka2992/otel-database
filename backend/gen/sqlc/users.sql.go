// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, age) VALUES ($1, $2, $3) RETURNING id, name, email, age
`

type CreateUserParams struct {
	Name  string
	Email string
	Age   int32
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.Age)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Age,
	)
	return i, err
}

const deleteUserByEmail = `-- name: DeleteUserByEmail :one
DELETE FROM users WHERE email = $1 RETURNING id, name, email, age
`

func (q *Queries) DeleteUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, deleteUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Age,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :one
DELETE FROM users WHERE id = $1 RETURNING id, name, email, age
`

func (q *Queries) DeleteUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, deleteUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Age,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, age FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Age,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, age FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Age,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET name = $2, email = $3, age = $4 WHERE id = $1 RETURNING id, name, email, age
`

type UpdateUserParams struct {
	ID    int32
	Name  string
	Email string
	Age   int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Age,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Age,
	)
	return i, err
}
